import json
import numpy as np
import pandas as pd
import requests

#stole this part from a message board when trying to figure out how to expand my DataFrame
# only non-original part, I swear! lol
desired_width=320
pd.set_option('display.width', desired_width)
np.set_printoptions(linewidth=desired_width)
pd.set_option('display.max_columns',10)
##

apiURL = "http://www.opensecrets.org/api/?method=getLegislators&id=PA&apikey=__APIKEY__&output=json"
req = requests.get(apiURL)
errors = 0


if int(req.status_code)==200:
    apiDict = json.loads(req.text) #json.loads
    candidates = 0
    runningTotal = 0
    avg = 0
    male = 0
    female = 0
    totalTenure = 0
    moneySpent = 0
    names = []
    COH = []
    biggestCON = []
    biggestContribution = []
    percentage = []
    firstLevel = apiDict['response']['legislator']


    for i in firstLevel:
        att = i['@attributes']
        cid = att['cid']

        if att['gender'] == 'M':
            male += 1
        elif att['gender'] == 'F':
            female += 1

        getSummary = "http://www.opensecrets.org/api/?method=candSummary&cid=" + str(cid) + "&cycle=2018&apikey=__APIKEY__&output=json"
        sumGet = requests.get(getSummary)
        if int(sumGet.status_code)==200: #checks for any errors in recreating the url
            sumDict = json.loads(sumGet.text)
            sum = sumDict['response']['summary']['@attributes']
            candidates += 1
            tenure = 2019 - int(sum['first_elected'])
            totalTenure = totalTenure + tenure
            moneySpent = moneySpent + float(sum['spent'])
            runningTotal = runningTotal + float(sum['cash_on_hand'])


        else:
            errors += 1

        getContributor = "https://www.opensecrets.org/api/?method=candContrib&cid=" + str(cid) + "&cycle=2018&apikey=__APIKEY__&output=json"
        conGet = requests.get(getContributor)
        if int(conGet.status_code)==200:
            conJSON = json.loads(conGet.text)
            conLevel = conJSON['response']['contributors']['contributor'][0]['@attributes']
            con = ""
            conAmount = 0
            for row in conLevel:
                if int(conLevel['total']) > conAmount:
                    conAmount = int(conLevel['total'])
                    con = conLevel['org_name']
            percent = round((float(conAmount)) / float(sum['total']), 3)
            names.append(sum['cand_name'])
            COH.append(sum['cash_on_hand'])
            biggestCON.append(con)
            biggestContribution.append(conAmount)
            percentage.append(percent)
      
#I took out the printed messages in favor of a DataFrame, which takes longer, but looks better
    data = pd.DataFrame({'Candidate': names,
                         'Cash On Hand': COH,
                         'Biggest Donor': biggestCON,
                         'Donor Amount': biggestContribution,
                         '% of Total Funds': percentage})

    print (data)

    print ("\n" * 4)

    avg = int(runningTotal / candidates)
    print ("*" * 25)
    print ("$" + str(avg) + " per candidate on hand")
    print ("*" * 25)
    ratio = int(male / female)
    print ("The ratio of male to female candidates is " + str(ratio) + ":1" )
    print ("*" * 25)
    avgTenure = int(totalTenure / candidates)
    print ("The average tenure is " + str(avgTenure) + " years")
    print ("*" * 25)
    moneyINT = int(moneySpent)
    print ("A total of $" + str(moneyINT) + " has been spent by winning campaigns in PA during the 2018 cycle.")
    print ("*" * 25)
    if errors < 1 or errors > 1:
        print ("with " + str(errors) + " errors")
    else:
        print ("With " + str(errors) + " error")

else:
    errors += 1
